PHASE 2 :

# Step 1

Code affected: MenuScreen, PauseScreen, PLayScreen, Hud

Flaw: The mentioned classes should not create their buttons and labels by itself according to Single Responsibility Rule.

Fix: creation of buttons and labels are separated from their usage by introducing ImageButtonBuilder, LabelBuilder classes (apply Builder design pattern)


#Step 2

Code affected: UfoManager

Flaw: UfoManager is currently responsible to multiple "actors" such as: moving UFO and checking if the rocket hit UFO, drawing UFO, storing all the UFOs.

Fix: Create UfoManagerFacade that contains the same responsibilities as the UfoManager through the help of different classes: UfoDrawer, UfoMover, UfoRepo (apply facade design pattern) and having an instance variable of UfoManagerFacade in UfoManager class.


# Step 3

Code affected: UfoManager

Flaw: The mentioned class should not create its facade by itself according to Single Responsibility Rule.

Fix: creation of facade is seperated from its usage by introducing UfoManagerFacadeBuilder class(apply Builder design pattern)


#Step 4

Code affected: SpaceShipShooterStarter

Flaw: SpaceShipShooterStarter has to interact with many different subclasses of Screen. We want to obscure the creation process for those classes

Fix: Created StateFactory to encapsulate constructor call to get instance of those screens on the SpaceShipShooterStarter without it knowing which constructor was called. (apply Simple Factory Design Pattern).

#Step 5:

Code affected: Car, assets folder

Flaw: the Car that we used for the SpaceShipShooterStarter doesn't look realistic and capture the theme that we set up.

Fix: We delete our old car image, find a new car image in the form of an armoured vehicle, pushed it to our asset folder. We then set up approriate starting position and size for it to use in our game.

#Step 6:

Code affected: Car, SpaceShipShooterStarter

Flaw: the Car keep going even if it's out of the screen region.

Fix: Only allows the Car to move if it's still inside the screen region.

#Step 7: 

Code affected:

Flaw: Didn't have notes file to specify details of our changes to the SpaceShipShooter game.

Fix: Add a notes.txt file to the spaceship_shooter folder and notes the detailed changes to the game in the step-by-step format.

#Step 8:

Code affected: Asset folder, ImageButtonBuilder, Car, UFO, Rocket.

Flaw: The image that we used haven't been put to the specific folder spaceship_shooter in the assets folder.

Fix: Put the images specifically used for our game to the spaceship_shooter folder, and add their descriptions to the description.txt file inside that folder. Fix the codes to access these images in a new directory.

#Step 9:

Code affected: spaceship_shooter repository inside asset.

Flaw: The images that we used in our game hasn't been described yet.

Fix: add the descriptions of every images file to the description.txt file.

#Step 10:

Code affected: MenuScreen, PauseScreen, PlayScreen, Car.

Flaw: Inconsistent usage of Screen and RetroManiaScreen among different games.

Fix: make all the Screen classes above extends the RetroManiaScreen class, and change the implementation of method handleInput to fit with the RetroManiaScreen's structure.

#Step 11:

Code affected: MainScreenInterface

Flaw: lack of java docs and comments throughout the game.

Fix: Test adding java docs and comments to MainScreenInterface.

#Step 12:

Code affected: MainScreenInterface, UFO, UfoDrawer, UfoManager, UfoManagerFacade, UfoManagerFacadeBuilder, UfoMover, UfoRepo.

Flaw: lack of java docs and comments throughout the game.

Fix: Adding and updating java docs and comments to the above classes..

#Step 13:

Code affected: Background, Car, GameStats, Hud, ImageButtonBuilder, LabelBuilder, Rocket

Flaw: lack of java docs and comments throughout the game.

Fix: Adding and updating java docs and comments to the above classes..

#Step 14:

Code affected: MainScreenInterface, SpaceShipShooterStarter, spaceship_shooter repository inside asset.

Flaw: We haven't have the setting screen to enable/disable our theme (personal feature)

Fix: Adding a SettingScreen class that would have a select box to choose the game's theme (Independence day with UFO, Halloween with the Witch, or Christmas with Santa Clauss).

It will also have an exit button to exit to the menu screen.

#Step 15:

Code affected: UFO, MainScreenInterface, PauseScreen, PlayScreen, StateFactory, SpaceShipShooterStarter, spaceship_shooter repository inside asset.

Flaw: We haven't incorporate the setting to our game just yet.

Fix: Let the pause screen access the setting screen through touching the setting button being added to the pause screen.

Take the user input for the theme in the setting page to display the appropriate entities based on the theme on the Play Screen after exiting the setting screen to the menu screen.

#Step 16:

Code affected:  glassy-ui.json

Flaw: the template json file is not in correct java format for json files.

Fix: Fixes all the incorrect formats on that file.

#Step 17:

Code affected: SpaceShipShooterStarter, MenuScreen, SettingScreen, PauseScreen, PlayScreen

Flaw: We need to get rid of couplings and 'depreciated constructor method'

Fix: deleted "game" attribute from constructor class of all above-mentioned classes

#Step 18:

Code affected: MenuScreen, PauseScreen

Flaw: All the screen classes are responsible to multiple actors, including updating the entities on the screen and rendering the screen itself.

Fix: Adding the GameRenderer class in the new utils package inside the spaceship_shooter package which responsible for rendering the screens in the game.

Modify MenuScreen and PauseScreen to test rendering the menu and pause screens using the GameRenderer. This would fit with the Single Responsibility Principle and the MVP pattern, while removing duplicate codes.

#Step 19:

Code affected: PlayScreen

Flaw: PlayScreen is responsible to multiple actors, including handling inputs, updating the entities on the screen and rendering the screen itself.

Fix: Applied MVP pattern by introducing new class named as PlayScreenRenderer which is child class of GameRenderer
We introduced PlayScreenRenderer rather then using GameRenderer in order to draw more specific actors/entities

#Step 20:

Code affected: PauseScreen

Flaw: PauseScreen is responsible to multiple actors, including handling inputs and rendering the screen itself.

Fix: Applied MVP pattern by introducing new class named as PauseScreenRenderer which is child class of GameRenderer
We introduced PauseScreenRenderer rather then using GameRenderer in order to draw more specific actors/entities.

#Step 21:

Code affected: GameRenderer, PauseScreenRenderer, PlayScreenRenderer

Flaw: The Renderer Classes should not be responsible for handling input, this should be handled by the Screen Classes.

Fix: Delete the handleInput method and modify the update method to adapt with the change in all above classes.

#Step 22:

Code affected: PauseScreen

Flaw: In step 18, when introducing GameRenderer class to render the pause screen, the handleInput method in PauseScreen wasn't working, and we have to add the listener for all the buttons to recognize input from the user.

Fix: Modify the render method in the PauseScreen Class to update the screen accordingly, which makes the handleInput method work and the pause screen is now able to recognize input from the user. Delete all the listeners for the buttons.

#Step 23:

Code affected: MenuScreen, SettingScreen

Flaw: MenuScreen and SettingScreen are responsible to multiple actors, including handling inputs and rendering the screen itself.

Fix: Applied MVP pattern by introducing two new classes named as MenuScreenRenderer and SettingScreenRenderer which are child classes of GameRenderer
We introduced MenuScreenRenderer and SettingScreenRenderer rather then using GameRenderer in order to draw more specific actors/entities.

#Step 24:

Code affected: MenuScreen, PauseScreen, PlayScreen, SettingScreen

Flaw: Too many unused import statements in the above classes.

Fix: Delete all the unused import statements in all the above classes.

#Step 25:

Code affected: MainScreenInterface, SpaceShipShooterStarter, GameRenderer, Setting Screen

Flaw: Our game hasn't have music yet.

Fix: Add the MusicManager to play or stop the music (the mp3 file added to the spaceship_shooter package inside asset), based on the check box music that is created in the SettingScreen.

#Step 26:

Code affected: all classes in the individuals package

Flaw: Access modifiers haven't been restricted, there are many unused import statements.

Fix: Delete all the unused import statements and restrict all loose access modifiers in all the above classes.

#Step 27:

Code affected: BackGround, Car, GameStats, Hud, ImageButtonBuilder, LabelBuilder, Rocket, PlayerScreen Renderer

Flaw: Some Java docs, variables and methods are not properly named and documented

Fix: Fix and modify all Java docs, variables and methods that are not properly named and documented.

#Step 28:

Code affected: SpaceShipShooterStarter, PlayScreen

Flaw: MVP design still creating couplings and wrong dependency flow

Fix: Created Presenter classes and implemented "Presenter", "StarterPresenter", "PlayScreenPresenter"
#TODO: implement rest of presenter classes

#Step 29:

Code affected: MenuScreen, PauseScreen, SettingScreen, MenuScreenPresenter, PauseScreenPresenter, SettingScreenPresenter

Flaw: the others Presenter classes in step 28 haven't been implemented yet.

Fix: implement classes "MenuScreenPresenter", "PausePresenter", "SettingScreenPresenter". Remove all the Renderer classes.

#Step 30:

Code affected: PauseScreen, PlayScreen

Flaw: the transfer between the two screens contains bugs since it's these screens are not well-disposed before exiting and enter another screen, resulting the play screen unable to go back to the pause screen in the second time.

Fix: dispose the screens clearly and properly by calling dispose methods in the Screen Classes (View) before accessing the Presenter method for transfering.

#Step 31:

Code affected: all the Presenter Classes except the StarterPresenter.

Flaw: After the implementation of all the Presenter classes for the new MVP pattern, music is not working on our game.

Fix: incorporate music on our game by creating an update method for the Presenter which update the gamecam and play the music, while letting its child classes called it

#Step 32:

Code affected: all classes in the screens and presenters package.

Flaw: Access modifiers haven't been restricted, there are many unused import statements.

Fix: Delete all the unused import statements and restrict all loose access modifiers in all the above classes.