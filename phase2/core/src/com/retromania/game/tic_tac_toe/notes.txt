PHASE 2:

#Step 1
Code Affected: Cell, CellManager, TicTacToeLogic, TicTacToeStarter
Flaw: Code Smelled from Change Preventers.
TicTacToeStarter creates board and manages all Cell instances.
Fix: CellManager class created to manage Cell instances.
Delegated row, column, diagonal win checking methods from TicTacToeLogic to CellManager.
Removed Texture instance dependencies in Cell objects. Added converting method, .getCell() in TicTacToeStarter.

#Step 2
Code Affected: TicTacToeLogic
Flaw: nowinner variable in TicTacToeLogic class does not change value to reflect existence of winners.
Fix: added else if statement to isEnd() method in the class to check for no wins, and change the value accordingly.

#Step 3
Code Affected: TicTacToeStarter, TicTacToe
Flaw: TicTacToeStarter also implements TicTacToe interface. Should only implement the UI. Need to separate concern.
Fix: Create TicTacToe class that is responsible for the implementation of the game.

#Step 4
Code Affected: Cell, CellManager
Flaw: CellManager class has a logical flaw in calculating whether there is a win pattern.
Fix: Fixed the logic by removing for loops, readjusting indices. While trying to fix this Cell class was also modified.

#Step 5
Code Affected: TicTacToe, TicTacToeLogic, TicTacToeStarter
Flaw: TicTacToeLogic is a dispensible class. Function clashes with TicTacToe class.
Fix: By removing TicTacToeLogic, moving methods into TicTacToe. Also cleaned up TicTacToe code.

#Step 6
Code Affected: Cell, CellManager, TicTacToe, TicTacToeStarter
Flaw: TicTacToeStarter calls upon CellManager directly. Any calls should be made through TicTacToe.
      Similarly, TicTacToeStarter has a too complex UI Drawing system, Cell states should have unified information.
Fix: Added .getCellStates() method to TicTacToe class in order to pass double array of the state of Cells from TicTacToe class.
     Edited Cell and CellManager to simplify Cell state information.

#Step 7
Code Affected: TicTacToeStarter, GameLister
Flaw: Depreciated constructor
Fix: Fixed both classes to update to new constructor.

#Step 8
Code Affected: MenuScreen, PlayScreen, TicTacToeStarter
Flaw: TicTacToeStarter class implements whole TicTacToe game, when it should just start the game.
Fix: Separated TicTacToeStarter class to just start game, set screen to MenuScreen, then upon clicking a button users play.

#Step 9
Code Affected: All files inside tic_tac_toe package
Flaw: All files inside tic_tac_toe package are not organized into packages
Fix: Moved Cell, CellManager, TicTacToe class into newly created individuals package. Moved GameOverScreen, MenuScreen, PlayScreen into screens package.

#Step 10
Code Affected: Files inside android/assets package
Flaw: Unorganized tictactoe game assets
Fix: Moved tictactoe game assets inside respective tic_tac_toe package.

#Step 11
Code Affected: PlayScreen, MenuScreen
Flaw: did not edit texture location after organizing assets file
Fix: Edited locations of all texture files metioned

#Step 12
Code Affected: Cell, CellManager, TicTacToe
Flaw: Need specific methods to implement AI player.
Fix: Added methods to deep clone a current TicTacToe game, change the state of a Cell, get state of game, get Cell information.

#Step 13
Code Affected: PlayScreen, MenuScreen.java
Flaw: Lack of customization features.
Fix: Added the option to play with cat icons.

#Step 14
Code Affected: CellManager, TicTacToe, MenuScreen, PlayScreen
Flaw: Lack of customization features.
Fix: Added being able to customize the dimensions of the tictactoe board.

#Step 15
Code Affected: CellManager, TicTacToe
Flaw: application crashes when result is a draw between two players.
Fix: fixed by changing CellManager's Cell object, winnerCell, to String object, winner.

#Step 16
Code Affected: MenuScreen, PlayScreen, TicTacToeStarter
Flaw: cannot save user data
Fix: fixed by passing the GameSaver class through the screens, getting the User in the PlayScreen and updating score accordingly.

#Step 17
Code Affected: ImageButtonBuilder, MenuScreen
Flaw: too lengthy imageButton construction process
Fix: Added ImageButtonBuilder class to build imageButton and configurations.


#Step 18
Code Affected: TicTacToeStarter
Flaw: The game was not using dagger
Fix: The starter can be ginned from dagger now.


#Step 19
Code Affected: MenuScreen, PlayScreen, CellManager
Flaw: All the aforementioned classes had their instantiations made by hard coding.
Fix: Dagger was used to inject dependencies.

#Step 20
Code Affected: PlayScreen, Cell, CellManager, TicTacToe
Flaw: TicTacToe logic in Cell, CellManager, TicTacToe all depend on the device screen width and height.
Fix: Moved logic that depends on width and height to PlayScreen, which is the presenter.

#Step 21
Code Affected: All classes within presenters package, TicTacToeStarter, MenuScreen, PlayScreen
Flaw: need to implement MVP
Fix: Created presenters and separated logical concerns from screens to presenters.

#Step 22
Code Affected: MenuPresenter, PlayPresenter, MenuScreen, PlayScreen, TicTacToeStarter
Flaw: Need to implement save method again with GameSaver class
Fix: created GameSaver instance in PlayPresenter class, then update score logic accordingly.

#Step 23
Code Affected: MenuPresenter, PlayPresenter, Presenter, MenuScreen, PlayScreen, CellManager, TicTacToe
Flaw: userpreference instance being passed around in view (screen classes)
Fix: made size static in UserPreference class.

#Step 24
Code Affected: All classes within tic_tac_toe module except Presenter, TicTacToeConfiguration, TicTacToeStarterComponent
Flaw: MVP not implemented correctly
Fix: Moved everything related to UI to the screens (View)

#Step 25
Code Affected: PlayScreen, PlayPresenter, CellManager
Flaw: TicTacToe has a bug when checking for winners diagonally, when the game is bigger than size 4.
Fix: Fixed checkDiagLeft checkDiagRight logic in CellManager class.

#Step 26
Code Affected: Cell, CellManager, TicTacToe, PlayPresenter, MenuScreen, PlayScreen
Flaw: not enough Javadoc
Fix: Added some Javadoc to individuals

#Step 27
Code Affected: PlayScreen, MenuScreen, GameOverScreen
Flaw: Methods too long
Fix: split them into smaller methods.