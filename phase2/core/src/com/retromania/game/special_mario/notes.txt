# Step 1

Code affected: SpecialMarioStarter

The environment of the first level Of the game was made, added, and shown on the device


# Step 2

Code affected: SpecialMarioStarter

Flaw : The code used to use the old constructors of RetroManiaInnerGame which required the use of
RetroManiaInnerGame, but we didn't need that instance in our code.
Fix: Used the new


# Step 3

Code affected: SpecialMarioStarter

Flaw : There only needs to be one instance of the inner game, therefore it is best to use the
singleton design pattern, this also helps with removing the passing around of the value of the inner
game.
Fix: Used Singleton design pattern for the said class.


# Step 4

Code affected: MainPlayer

MainPlayer class added. This class is going to be responsible for the behaviour, posture and
presentation of the main player. TODO : Use Facade design pattern in the future inorder to,
divide these responsibilities.

# Step 5

Code affected: MainPlayer

MainPlayer View And Figure are now attached to each other.


# Step 6

Code affected: MainPlayer, SpecialMarioStarter

Basic movement was added to the main player, it can move along the x axis and also jump,
also the gameCam now follows the mario around.


# Step 7

Code affected: MainPlayer

A Hat was added to the player that acts as a sensor for allowing us to recognise collisions with the
top of our character.


# Step 8

Code affected: MainPlayer, SpecialMarioStarter

Flaw : Even though that SpecialMarioStarter was using the singleton design pattern, we still had to
pass it around to MainPlayer because it was being instantiated in our constructor.

Fix: We made use of our "show" method, which is called by Libgdx whenever the screen is about to be
shown for the first time. We instantiated the value of SpecialMarioStarter here, because by here
our singleton object is initialized and the constructor of MainPlayer has been already called,
so we can use our singleton design pattern.



# Step 9

Code affected: SpecialMarioStarter, Obstacle, TiledMapIndividual

Flaw : SpecialMarioStarter had the responsibility to make individuals from the tile map, while that
is not on of it's concerns, this broke the single responsibility rule.

Fix: An abstract class, called TiledMapIndividual was made in order to take care of any type of
initialization that all tiled map individuals need. Obstacle, was added as it's first subclass,
which includes barriers, such as walls, ground and etc.



