# Step 1

Code affected: SpecialMarioStarter

The environment of the first level Of the game was made, added, and shown on the device


# Step 2

Code affected: SpecialMarioStarter

Flaw : The code used to use the old constructors of RetroManiaInnerGame which required the use of
RetroManiaInnerGame, but we didn't need that instance in our code.
Fix: Used the new


# Step 3

Code affected: SpecialMarioStarter

Flaw : There only needs to be one instance of the inner game, therefore it is best to use the
singleton design pattern, this also helps with removing the passing around of the value of the inner
game.
Fix: Used Singleton design pattern for the said class.


# Step 4

Code affected: MainPlayer

MainPlayer class added. This class is going to be responsible for the behaviour, posture and
presentation of the main player. TODO : Use Facade design pattern in the future inorder to,
divide these responsibilities.

# Step 5

Code affected: MainPlayer

MainPlayer View And Figure are now attached to each other.


# Step 6

Code affected: MainPlayer, SpecialMarioStarter

Basic movement was added to the main player, it can move along the x axis and also jump,
also the gameCam now follows the mario around.


# Step 7

Code affected: MainPlayer

A Hat was added to the player that acts as a sensor for allowing us to recognise collisions with the
top of our character.


# Step 8

Code affected: MainPlayer, SpecialMarioStarter

Flaw : Even though that SpecialMarioStarter was using the singleton design pattern, we still had to
pass it around to MainPlayer because it was being instantiated in our constructor.

Fix: We made use of our "show" method, which is called by Libgdx whenever the screen is about to be
shown for the first time. We instantiated the value of SpecialMarioStarter here, because by here
our singleton object is initialized and the constructor of MainPlayer has been already called,
so we can use our singleton design pattern.



# Step 9

Code affected: SpecialMarioStarter, Obstacle, TiledMapIndividual

Flaw : SpecialMarioStarter had the responsibility to make individuals from the tile map, while that
is not on of it's concerns, this broke the single responsibility rule.

Fix: An abstract class, called TiledMapIndividual was made in order to take care of any type of
initialization that all tiled map individuals need. Obstacle, was added as it's first subclass,
which includes barriers, such as walls, ground and etc.


# Step 10

Code affected: Layers

Made an enum that encapsulates the process of making the objects of a layer and retrieving the
information of the layer from the tmx file. This enum uses java reflection in order to grab the
right constructor and class for each type of layer.


# Step 11

Code affected: TiledMapIndividualFactory, Fire, FriezingBlock, Obstacle, Reward, Water

Made a factory class that uses the Layers to class inorder to construct all the different types of
layers from the ground up.


# Step 12

Code affected: MainPlayer, MainPlayer.BodyPart, MainPlayer.MainPlayerCollisionInfo,
MarioWorldListener

MainPlayer.BodyPart : Made an enum for giving info about the part of the fixture of the mainPlayers
body which was in contact.

MainPlayer.MainPlayerCollisionInfo : This class incorporates both MainPlayer.BodyPart, and
MainPlayer for the use of the other object that has been in contact with the player.

MarioWorldListener : beginContact was implemented.

# Step 13

Code affected: SpecialMarioStarter

Music added to the level of the game.

# Step 14

Code affected: Collidable


Made an interface that takes care of setting up what can collide with a fixture and what is the
mask of the fixture.


# Step 15

Code affected: TiledMapIndividual

Flaw : Constructor of the class had more than one concern and there fore it was becoming a
behemoth.

Fix: Four helper functions were made inside the class to help preserve the rules introduced by
Uncle Bob about functions in https://youtu.be/QedpQjxBPMA?list=PLlu0CT-JnSasQzGrGzddSczJQQU7295D2.



# Step 16

Code affected: MainPlayer

Flaw : createMainPlayer function of the class had more than one concern and there fore it was
becoming a behemoth.

Fix: six helper functions were made inside the class to help preserve the rules introduced by
Uncle Bob about functions in https://youtu.be/QedpQjxBPMA?list=PLlu0CT-JnSasQzGrGzddSczJQQU7295D2.
TODO the number of helper functions is growing so much that maybe this class is not responsible
for only one concern, try to fix in future.


# Step 17

Code affected: MainPlayer, MainPlayerCollisionInfo, BodyPart, Character, CharacterSprite

Flaw : As Described in step 16 the class for MainPlayer was becoming to big and it had different
concerns such as Creating the texture, handling box2d and the logic of the MainPlayer at the
same time.

Fix: Class CharacterSprite was made for handling the concern of showing each character, with the
goal of using it in future for enemies as well. Class Character was made inorder to handle box2d.
Also the Class BodyPart and MainPlayerCollisionInfo are now classes outside MainPlayer because they
can be used in the future for other classes such as enemies.




# Step 18

Code affected: SpecialMarioStarter, WorldInformation

Flaw : There was too many functions in SpecialMarioStarter because there is more than one thing
that this class is trying to implement.

Fix: Added WorldInformation class, which has the box2d world, the tiles that are loaded into the
world, and also the atlas that will be used in the world to show things and anything that might be
used to initialize the whole world.


# Step 19

Code affected: SpecialMarioStarter, GameRenderer

Flaw : There was too many functions in SpecialMarioStarter because there is more than one thing
that this class is trying to implement.

Fix: Added GameRenderer class, which has the responsibility to render our game, this includes having
the necessary members and game cams inorder to be able to show all of the game.


# Step 20

Code affected: MusicManager, SpecialMarioStarter

Flaw : The SpecialStarter was managing songs while it only has the duty of starting the innerGame
and save information about it.

Fix: Added MusicManager class that manages the music.
