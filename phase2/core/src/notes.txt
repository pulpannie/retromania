PHASE 2 :
# Step 1

Code affected: RetroManiaGame.create, android/java/AndroidLauncher,
desktop/com.retromania.game.desktop/DesktopLauncher

Flaw : The code was instantiating a new screen, so we tried to use setScreen to set the screen
outside the class, but we couldn't do that because setScreen should be called after
"create" method is called.
Fix: so we used anonymous class and dependency injection in the backend
(pc and android implementation) to set the screen, because of this the RetroManiaGame,
which is one of our highest abstractions in our application,
is no longer dependant on the screen classes.


# Step 2

Code affected: RetroManiaGame.create, android/assets,
desktop/assets

Flaw : All the assets where in one folder and the management of the said folder was getting out of
hand.
Fix: Directories with the name of the projects where added to each asset folder, and a description
file was added to each folder for the description of the assets.


# Step 3

Code affected: Special_mario

A new game was added to demonstrate the flexibility of our model in adding new games.

# Step 4

Code affected: RetroMania, RetroManiaGame, Creatable

Flaw : We will have at most one instance of RetroMania, and RetroManiaGame class. we also need its
instance in all of our screens, therefore we can use the SINGLETON design pattern.
Fix: We made the constructors for the said classes private and made the new interface Creatable<T>.
This is because we want to keep the use of anonymous classes introduced to step 2, while still using
SINGLETON design pattern. This is in a way close to Facade design pattern. the Creatable object is
responsible for creating the object T. This way the RetroMania class doesn't have to worry about what,
class it need to be showing in the beginning and this will be done in the backend.




