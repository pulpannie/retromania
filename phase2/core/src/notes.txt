PHASE 2 :
# Step 1

Code affected: RetroManiaGame.create, android/java/AndroidLauncher,
desktop/com.retromania.game.desktop/DesktopLauncher

Flaw : The code was instantiating a new screen, so we tried to use setScreen to set the screen
outside the class, but we couldn't do that because setScreen should be called after
"create" method is called.
Fix: so we used anonymous class and dependency injection in the backend
(pc and android implementation) to set the screen, because of this the RetroManiaGame,
which is one of our highest abstractions in our application,
is no longer dependant on the screen classes.


# Step 2

Code affected: RetroManiaGame.create, android/assets,
desktop/assets

Flaw : All the assets where in one folder and the management of the said folder was getting out of
hand.
Fix: Directories with the name of the projects where added to each asset folder, and a description
file was added to each folder for the description of the assets.


# Step 3

Code affected: Special_mario

A new game was added to demonstrate the flexibility of our model in adding new games.

# Step 4

Code affected: RetroMania, RetroManiaGame, Creatable

Flaw : We will have at most one instance of RetroMania, and RetroManiaGame class. we also need its
instance in all of our screens, therefore we can use the SINGLETON design pattern.
Fix: We made the constructors for the said classes private and made the new interface Creatable<T>.
This is because we want to keep the use of anonymous classes introduced to step 2, while still using
SINGLETON design pattern. This is in a way close to Facade design pattern. the Creatable object is
responsible for creating the object T. This way the RetroMania class doesn't have to worry about what,
class it need to be showing in the beginning and this will be done in the backend.

# Step 5

Code affected: RetroManiaInnerGame, RetroManiaScreen

Flaw : All the inner games and screens are still passing around the game instance, which is
unnecessary and repetitive and sometimes even useless.
Fix: All the high level classes mentioned in steps gained new constructors which don't take in the
game it self, because the instance of the game can be reached during runtime, see step 4. The old
methods are now deprecated and the refactoring of the lower level classes was added to TODO list.


# Step 6

Code affected: GameLister, UserNameTextInputListener

Flaw : There was a bug, we had a leakage of our resources made in GameLister, because when we called,
the setScreen we didn't call the dispose method.
Fix: Dispose method was called properly and the invisible button was destroyed.

# Step 7

Code affected: RetroManiaScreen

Flaw : game instance was set manually by the developer each time there was a instantiation of the
RetroManiaScreen but we made a constructor which takes no argument, but there were errors because,
the subclasses where still using the variable that referenced to the game.
Fix: Used the function made in step 4 to get the game in the empty constructor.


# Step 8

Code affected: GameLister, SpecialMarioStarter

Flaw : Old use of constructor for SpecialMarioStarter.
Fix: The use was updated, as requested by the TODO list added in step 5.


# Step 9

Code affected: Individual

Individual is now and interface, because we didn't use any of it's members.


# Step 10

Code affected: assets/special_mario/description.txt

Assets description file was updated.

# Step 11

Code affected: Gradle Scripts

We were not able to use java 1.8 features like default, so we changed the Source and Target
Compatibility to java 1.8.


# Step 12

Code affected: RetroManiaInnerGame, GameSaver

Flaw : RetroManiaInnerGame shouldn't be concerned with the way that things are saved and that's why
RetroManiaGame has become so huge, the same fate is awaiting its subclasses. Also we had to ask
the developers to check whether or not the name of their game for saving had been used previously
or not, and they had to do that manually but from now on there is a check called alreadyContainsGame
in the GameSaver class.
Fix: We made a class called GameSaver responsible for making the saves, for now the subclasses don't
have to implement the functions themselves any more. This class is Instantiated in
RetroManiaInnerGame class based on the information that we have about the name of the game.
TODO : is to delete all the functions that used to implement the saving process before,
and use this new object in our game lister.


# Step 13

Code affected: GameLister.show

Flaw : The function was so long it was getting hard to change any thing without breaking the code.
Fix: Broke up the function into new functions.



# Step 14

Code affected: Character, CharacterSprite

Flaw : Character and CharacterSprite were in Special Mario while they are a feature that can be used
by all projects.
Fix: All the files were moved to shared_abstractions and also made abstract. CharacterSprite was
made package protected as well because only Character needs to access it.


# Step 15

Code affected: Character, Collidable

Flaw : Collidable was in Special Mario while they are a feature that can be used
by all projects.
Fix: All the files were moved to shared_abstractions and also made abstract.

# Step 16

Code affected: All The Project (Car, Component, TestClass)

Flaw : We were passing around our values our selves, using singleton design patterns our selves.
and we don not enjoy typing :), "We hate WET".
Fix: We used dagger 2 in order to do our dependency injection, This can now do our dependency
injection at compile time, which is much better and faster compared to something like java springs
which is exactly what we need in a game. This is because dagger uses annotations at compile time
rather than using reflection during runtime, right now just the aforementioned classes have been
added to show the dummy use of dependency injection to team mates.



# Step 17

Code affected: Individual, RetroManiaScreen, Renderable

Flaw : We didn't have any type of software structure other than the one that the framework made us
use, which was implementing different functions for rendering and updating at each time step. This
was mainly because we have different models with different update models, so we couldn't just use
MVC or MVP because we didn't know how to update our models and also because the render method was in
the same class that is called by the framework and acts like the controller or the presenter.

Fix: We made an interface that is responsible for rendering things, an interface that is responsible
for updating models, we made lists of both of these interfaces and call them in our render method
and our update method. we made our Model class a generic class, it can take in its input through the
setInput and getInput, so that different models with different inputs for their update method
can still implement the said interface and even work on the past inputs if they wanted to.

PS. : Our main controller is the RetroManiaGame that sets the screen, but each screen class will have
a list of renderers, a list of models, which are in fact the views and the models and the screen
itself is the glue that holds all of them together.


# Step 18

Code affected: GameSaver

Added a way to get current game user.

# Step 18

Code affected: GameSaver

Made GameSaver Injectable, with using maps as the part that holds current users.
