PHASE 2 :
# Step 1

Code affected: RetroManiaGame.create, android/java/AndroidLauncher,
desktop/com.retromania.game.desktop/DesktopLauncher

Flaw : The code was instantiating a new screen, so we tried to use setScreen to set the screen
outside the class, but we couldn't do that because setScreen should be called after
"create" method is called.
Fix: so we used anonymous class and dependency injection in the backend
(pc and android implementation) to set the screen, because of this the RetroManiaGame,
which is one of our highest abstractions in our application,
is no longer dependant on the screen classes.


# Step 2

Code affected: RetroManiaGame.create, android/assets,
desktop/assets

Flaw : All the assets where in one folder and the management of the said folder was getting out of
hand.
Fix: Directories with the name of the projects where added to each asset folder, and a description
file was added to each folder for the description of the assets.


# Step 3

Code affected: MenuScreen, PauseScreen, PLayScreen, Hud

Flaw: The mentioned classes should not create their buttons and labels by itself according to Single Responsibility Rule.

Fix: creation of buttons and labels are seperated from their usage by introducing ImageButtonBuilder, LabelBuilder classes (apply Builder design pattern)


#Step 4

Code affected: UfoManager

Flaw: UfoManager is currently responsibe to multiple "actors" such as: moving UFO and checking if the rocket hit UFO, drawing UFO, storing all the UFOs.

Fix: Create UfoManagerFacade that contains the same responsibilities as the UfoManager through the help of different classes: UfoDrawer, UfoMover, UfoRepo (apply facade design pattern) and having an instance variable of UfoManagerFacade in UfoManager class.


# Step 5

Code affected: UfoManager

Flaw: The mentioned class should not create its facade by itself according to Single Responsibility Rule.

Fix: creation of facade is seperated from its usage by introducing UfoManagerFacadeBuilder class(apply Builder design pattern)


#Step 6

Code affected: SpaceShipShooterStarter

Flaw: SpaceShipShooterStarter has to interact with many different subclasses of Screen. We want to obscure the creation process for those classes

Fix: Created StateFactory to encapsulate constructor call to get instance of those screens on the SpaceShipShooterStarter without it knowing which constructor was called. (apply Simple Factory Design Pattern).

